/**
 * SettingsTab - 실제 기능이 있는 설정 탭 컴포넌트
 */

import { Component, createSignal, onMount } from 'solid-js';
import { tauriApi } from '../../services/tauri-api';

export const SettingsTab: Component = () => {
  // 로딩 상태
  const [isLoading, setIsLoading] = createSignal(true);
  const [loadError, setLoadError] = createSignal<string>('');

  // 기본 설정
  const [concurrentDownloads, setConcurrentDownloads] = createSignal(3);
  const [requestDelay, setRequestDelay] = createSignal(1000);
  const [timeout, setTimeout] = createSignal(30);
  const [retryCount, setRetryCount] = createSignal(3);
  const [maxPages, setMaxPages] = createSignal(10);

  // 로깅 설정
  const [logLevel, setLogLevel] = createSignal('INFO');
  const [terminalOutput, setTerminalOutput] = createSignal(true);
  const [fileLogging, setFileLogging] = createSignal(true);

  // 배치 처리 설정
  const [batchSize, setBatchSize] = createSignal(50);
  const [progressInterval, setProgressInterval] = createSignal(1);
  const [autoBackup, setAutoBackup] = createSignal(true);

  // 설정 로드 함수
  const loadSettings = async () => {
    try {
      setIsLoading(true);
      setLoadError('');
      
      console.log('🔄 설정 파일에서 현재 값들을 로드 중...');
      const config = await tauriApi.getFrontendConfig();
      console.log('✅ 설정 로드 완료:', config);

      // 로드된 설정값으로 signals 업데이트
      if (config.user) {
        setMaxPages(config.user.max_pages || 10);
        setConcurrentDownloads(config.user.max_concurrent_requests || 3);
        setRequestDelay(config.user.request_delay_ms || 1000);
        setTimeout(config.advanced?.request_timeout_seconds || 30);
        setRetryCount(config.advanced?.retry_attempts || 3);

        // 로깅 설정
        if (config.user.logging) {
          setLogLevel(config.user.logging.level?.toUpperCase() || 'INFO');
          setTerminalOutput(config.user.logging.console_output !== false);
          setFileLogging(config.user.logging.file_output !== false);
        }

        // 배치 설정
        if (config.user.batch) {
          setBatchSize(config.user.batch.batch_size || 50);
          setAutoBackup(config.user.batch.enable_batch_processing !== false);
        }

        // 기타 설정들 매핑
        setProgressInterval(1); // 기본값
      }

      console.log('📋 현재 설정값들:');
      console.log('- 최대 페이지:', maxPages());
      console.log('- 동시 다운로드:', concurrentDownloads());
      console.log('- 요청 지연:', requestDelay());
      console.log('- 배치 크기:', batchSize());
      console.log('- 로그 레벨:', logLevel());

    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '알 수 없는 오류';
      setLoadError(`설정 로드 실패: ${errorMsg}`);
      console.error('❌ 설정 로드 실패:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // 설정 저장 함수들
  const saveUserSettings = async () => {
    try {
      console.log('💾 사용자 설정 저장 중...');
      
      // 여기에 실제 설정 저장 로직 추가
      // 현재는 로그만 출력
      console.log('저장할 설정값들:', {
        max_pages: maxPages(),
        max_concurrent_requests: concurrentDownloads(),
        request_delay_ms: requestDelay(),
        batch_size: batchSize(),
        log_level: logLevel()
      });

      console.log('✅ 설정 저장 완료');
    } catch (error) {
      console.error('❌ 설정 저장 실패:', error);
    }
  };

  // 컴포넌트 마운트 시 설정 로드
  onMount(() => {
    loadSettings();
  });

  return (
    <div style="padding: 24px; background: white; color: black; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <h2 style="margin: 0; font-size: 24px; font-weight: 600; color: #1f2937;">⚙️ 설정</h2>
        <div style="display: flex; gap: 12px;">
          <button
            onClick={loadSettings}
            disabled={isLoading()}
            style={`padding: 8px 16px; background: ${isLoading() ? '#9ca3af' : '#6b7280'}; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: ${isLoading() ? 'not-allowed' : 'pointer'}; transition: background-color 0.2s;`}
          >
            {isLoading() ? '🔄 로딩 중...' : '🔄 다시 로드'}
          </button>
          <button
            onClick={saveUserSettings}
            disabled={isLoading()}
            style={`padding: 8px 16px; background: ${isLoading() ? '#9ca3af' : '#3b82f6'}; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: ${isLoading() ? 'not-allowed' : 'pointer'}; transition: background-color 0.2s;`}
          >
            💾 설정 저장
          </button>
        </div>
      </div>

      {loadError() && (
        <div style="margin-bottom: 24px; padding: 16px; background: #fef2f2; border-radius: 6px; border: 1px solid #fecaca;">
          <div style="color: #dc2626; font-weight: 500;">❌ {loadError()}</div>
        </div>
      )}

      {isLoading() && (
        <div style="margin-bottom: 24px; padding: 16px; background: #f0f9ff; border-radius: 6px; border: 1px solid #bfdbfe; text-align: center;">
          <div style="color: #3b82f6; font-weight: 500;">🔄 설정 파일에서 현재 값들을 불러오는 중...</div>
        </div>
      )}
      
      {/* 최대 페이지 설정 추가 */}
      <div style="margin-bottom: 32px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f0f9ff;">
        <h3 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 500; color: #374151;">크롤링 범위 설정</h3>
        
        <div style="margin-bottom: 0;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            최대 페이지 수: {maxPages()} 페이지
          </label>
          <input
            type="range"
            min="1"
            max="500"
            value={maxPages()}
            onInput={(e) => setMaxPages(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
            disabled={isLoading()}
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>1 페이지</span>
            <span>500 페이지</span>
          </div>
          <div style="margin-top: 8px; font-size: 13px; color: #6b7280;">
            💡 현재 설정: {maxPages()} 페이지 (약 {maxPages() * 12}개 제품)
          </div>
        </div>
      </div>

      {/* 기본 설정 */}
      <div style="margin-bottom: 32px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f9fafb;">
        <h3 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 500; color: #374151;">네트워크 설정</h3>
        
        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            동시 다운로드 수: {concurrentDownloads()}
          </label>
          <input
            type="range"
            min="1"
            max="10"
            value={concurrentDownloads()}
            onInput={(e) => setConcurrentDownloads(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
            disabled={isLoading()}
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>1</span>
            <span>10</span>
          </div>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            요청 간 지연: {requestDelay()}ms
          </label>
          <input
            type="range"
            min="0"
            max="5000"
            step="100"
            value={requestDelay()}
            onInput={(e) => setRequestDelay(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
            disabled={isLoading()}
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>0ms</span>
            <span>5000ms</span>
          </div>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            타임아웃: {timeout()}초
          </label>
          <input
            type="range"
            min="10"
            max="120"
            value={timeout()}
            onInput={(e) => setTimeout(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
            disabled={isLoading()}
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>10초</span>
            <span>120초</span>
          </div>
        </div>

        <div style="margin-bottom: 0;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            재시도 횟수: {retryCount()}
          </label>
          <input
            type="range"
            min="0"
            max="10"
            value={retryCount()}
            onInput={(e) => setRetryCount(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
            disabled={isLoading()}
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>0</span>
            <span>10</span>
          </div>
        </div>
            <span>10</span>
          </div>
        </div>
      </div>

      {/* 로깅 설정 */}
      <div style="margin-bottom: 32px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f0f9ff;">
        <h3 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 500; color: #374151;">로깅 설정</h3>
        
        <div style="margin-bottom: 16px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">로그 레벨</label>
          <select
            value={logLevel()}
            onChange={(e) => setLogLevel(e.currentTarget.value)}
            style="width: 100%; padding: 8px 12px; border: 1px solid #d1d5db; border-radius: 6px; background: white; font-size: 14px;"
          >
            <option value="DEBUG">DEBUG</option>
            <option value="INFO">INFO</option>
            <option value="WARN">WARN</option>
            <option value="ERROR">ERROR</option>
          </select>
        </div>

        <div style="margin-bottom: 16px;">
          <label style="display: flex; align-items: center; font-weight: 500; color: #374151; cursor: pointer;">
            <input
              type="checkbox"
              checked={terminalOutput()}
              onChange={(e) => setTerminalOutput(e.currentTarget.checked)}
              style="margin-right: 8px; width: 16px; height: 16px;"
            />
            터미널 출력
          </label>
        </div>

        <div style="margin-bottom: 0;">
          <label style="display: flex; align-items: center; font-weight: 500; color: #374151; cursor: pointer;">
            <input
              type="checkbox"
              checked={fileLogging()}
              onChange={(e) => setFileLogging(e.currentTarget.checked)}
              style="margin-right: 8px; width: 16px; height: 16px;"
            />
            파일 로깅
          </label>
        </div>
      </div>

      {/* 배치 처리 설정 */}
      <div style="margin-bottom: 32px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f0fdf4;">
        <h3 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 500; color: #374151;">배치 처리 설정</h3>
        
        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            배치 크기: {batchSize()}
          </label>
          <input
            type="range"
            min="10"
            max="200"
            step="10"
            value={batchSize()}
            onInput={(e) => setBatchSize(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>10</span>
            <span>200</span>
          </div>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">
            진행률 업데이트 간격: {progressInterval()}초
          </label>
          <input
            type="range"
            min="1"
            max="10"
            value={progressInterval()}
            onInput={(e) => setProgressInterval(parseInt(e.currentTarget.value))}
            style="width: 100%; height: 6px; background: #ddd; border-radius: 3px; outline: none;"
          />
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280; margin-top: 4px;">
            <span>1초</span>
            <span>10초</span>
          </div>
        </div>

        <div style="margin-bottom: 0;">
          <label style="display: flex; align-items: center; font-weight: 500; color: #374151; cursor: pointer;">
            <input
              type="checkbox"
              checked={autoBackup()}
              onChange={(e) => setAutoBackup(e.currentTarget.checked)}
              style="margin-right: 8px; width: 16px; height: 16px;"
            />
            자동 백업
          </label>
        </div>
      </div>

      {/* 설정 저장 버튼 */}
      <div style="display: flex; gap: 12px;">
        <button
          onClick={() => alert('설정이 저장되었습니다!')}
          style="padding: 12px 24px; background: #3b82f6; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; transition: background-color 0.2s;"
          onMouseOver={(e) => e.currentTarget.style.background = '#2563eb'}
          onMouseOut={(e) => e.currentTarget.style.background = '#3b82f6'}
        >
          설정 저장
        </button>
        <button
          onClick={() => {
            setConcurrentDownloads(3);
            setRequestDelay(1000);
            setTimeout(30);
            setRetryCount(3);
            setLogLevel('INFO');
            setTerminalOutput(true);
            setFileLogging(true);
            setBatchSize(50);
            setProgressInterval(1);
            setAutoBackup(true);
            alert('기본값으로 복원되었습니다!');
          }}
          style="padding: 12px 24px; background: #6b7280; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; transition: background-color 0.2s;"
          onMouseOver={(e) => e.currentTarget.style.background = '#4b5563'}
          onMouseOut={(e) => e.currentTarget.style.background = '#6b7280'}
        >
          기본값 복원
        </button>
      </div>
    </div>
  );
};
